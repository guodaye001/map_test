<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:mvc="http://www.springframework.org/schema/mvc"
  xsi:schemaLocation="http://www.springframework.org/schema/beans  
  http://www.springframework.org/schema/beans/spring-beans-4.2.xsd  
  http://www.springframework.org/schema/context  
  http://www.springframework.org/schema/context/spring-context-4.2.xsd  
  http://www.springframework.org/schema/mvc  
  http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd">
  
  <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
  <context:component-scan base-package="com.map.platform" />
  <!--避免IE执行AJAX时，返回JSON出现下载文件 -->
  <bean id="mappingJacksonHttpMessageConverter"
    class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
    <property name="supportedMediaTypes">
      <list>
        <value>text/html;charset=UTF-8</value>
        <value>application/json;charset=UTF-8</value>
      </list>
    </property>
  </bean>
  <!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
  <bean
    class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
    <property name="messageConverters">
      <list>
        <ref bean="mappingJacksonHttpMessageConverter" />	<!-- JSON转换器 -->
      </list>
    </property>
  </bean>
  
  <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
    <property name="definitions">
        <list>
            <value>/common/tiles/tiles-def.xml</value>
        </list>
    </property>
	</bean>
	<bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
	    <property name="order" value="1" />
	    <property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"></property>
	</bean>
	<!-- 定义跳转的文件的前后缀 ，视图模式配置-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	    <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
	    <property name="prefix" value="/jsp/" />
	    <property name="suffix" value=".jsp" />
	    <property name="order" value="2" />
  	</bean>
  
  <!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
  <bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />  
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000" />  
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960" />  
    </bean>

	<bean id="springUtil" class="com.map.platform.commons.utils.SpringUtil" />

	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
		<property name="config">
			<bean class="com.google.code.kaptcha.util.Config">
				<constructor-arg>
					<props>
						<prop key="kaptcha.border">no</prop>
						<prop key="kaptcha.border.color">105,179,90</prop>
						<prop key="kaptcha.textproducer.font.color">blue</prop>
						<prop key="kaptcha.image.width">100</prop>
						<prop key="kaptcha.textproducer.font.size">27</prop>
						<prop key="kaptcha.image.height">35</prop>
						<prop key="kaptcha.session.key">KAPTCHA_SESSION_KEY</prop>
						<prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>
						<prop key="kaptcha.GimpyEngine">WaterRipple</prop> 
						<prop key="kaptcha.textproducer.char.length">4</prop>
						<prop key="kaptcha.textproducer.font.names">Arial, Courier</prop>
						<prop key="kaptcha.background.clear.from">white</prop>
		                <prop key="kaptcha.background.clear.to">white</prop>
					</props>
				</constructor-arg>
			</bean>
		</property>
	</bean>
</beans>